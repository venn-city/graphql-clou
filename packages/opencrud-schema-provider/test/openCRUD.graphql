type AggregateGovernment {
  count: Int!
}

type AggregateMinister {
  count: Int!
}

type AggregateMinistry {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Government {
  id: ID!
  name: String
  ministries(where: MinistryWhereInput, orderBy: MinistryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ministry!]
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deleted: Int!
}

type GovernmentConnection {
  pageInfo: PageInfo!
  edges: [GovernmentEdge]!
  aggregate: AggregateGovernment!
}

input GovernmentCreateInput {
  name: String
  ministries: MinistryCreateManyWithoutGovernmentInput
  deletedAt: DateTime
  deleted: Int
}

input GovernmentCreateOneWithoutMinistriesInput {
  create: GovernmentCreateWithoutMinistriesInput
  connect: GovernmentWhereUniqueInput
}

input GovernmentCreateWithoutMinistriesInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

type GovernmentEdge {
  node: Government!
  cursor: String!
}

enum GovernmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  deleted_ASC
  deleted_DESC
}

type GovernmentPreviousValues {
  id: ID!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deleted: Int!
}

type GovernmentSubscriptionPayload {
  mutation: MutationType!
  node: Government
  updatedFields: [String!]
  previousValues: GovernmentPreviousValues
}

input GovernmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GovernmentWhereInput
  AND: [GovernmentSubscriptionWhereInput!]
  OR: [GovernmentSubscriptionWhereInput!]
  NOT: [GovernmentSubscriptionWhereInput!]
}

input GovernmentUpdateInput {
  name: String
  ministries: MinistryUpdateManyWithoutGovernmentInput
  deletedAt: DateTime
  deleted: Int
}

input GovernmentUpdateManyMutationInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

input GovernmentUpdateOneWithoutMinistriesInput {
  create: GovernmentCreateWithoutMinistriesInput
  update: GovernmentUpdateWithoutMinistriesDataInput
  upsert: GovernmentUpsertWithoutMinistriesInput
  delete: Boolean
  disconnect: Boolean
  connect: GovernmentWhereUniqueInput
}

input GovernmentUpdateWithoutMinistriesDataInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

input GovernmentUpsertWithoutMinistriesInput {
  update: GovernmentUpdateWithoutMinistriesDataInput!
  create: GovernmentCreateWithoutMinistriesInput!
}

input GovernmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  ministries_every: MinistryWhereInput
  ministries_some: MinistryWhereInput
  ministries_none: MinistryWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deleted: Int
  deleted_not: Int
  deleted_in: [Int!]
  deleted_not_in: [Int!]
  deleted_lt: Int
  deleted_lte: Int
  deleted_gt: Int
  deleted_gte: Int
  AND: [GovernmentWhereInput!]
  OR: [GovernmentWhereInput!]
  NOT: [GovernmentWhereInput!]
}

input GovernmentWhereUniqueInput {
  id: ID
}

scalar Long

type Minister {
  id: ID!
  name: String
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  ministry: Ministry
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deleted: Int!
}

type MinisterConnection {
  pageInfo: PageInfo!
  edges: [MinisterEdge]!
  aggregate: AggregateMinister!
}

input MinisterCreateInput {
  name: String
  votes: VoteCreateManyWithoutMinisterInput
  ministry: MinistryCreateOneWithoutMinisterInput
  deletedAt: DateTime
  deleted: Int
}

input MinisterCreateOneWithoutMinistryInput {
  create: MinisterCreateWithoutMinistryInput
  connect: MinisterWhereUniqueInput
}

input MinisterCreateOneWithoutVotesInput {
  create: MinisterCreateWithoutVotesInput
  connect: MinisterWhereUniqueInput
}

input MinisterCreateWithoutMinistryInput {
  name: String
  votes: VoteCreateManyWithoutMinisterInput
  deletedAt: DateTime
  deleted: Int
}

input MinisterCreateWithoutVotesInput {
  name: String
  ministry: MinistryCreateOneWithoutMinisterInput
  deletedAt: DateTime
  deleted: Int
}

type MinisterEdge {
  node: Minister!
  cursor: String!
}

enum MinisterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  deleted_ASC
  deleted_DESC
}

type MinisterPreviousValues {
  id: ID!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deleted: Int!
}

type MinisterSubscriptionPayload {
  mutation: MutationType!
  node: Minister
  updatedFields: [String!]
  previousValues: MinisterPreviousValues
}

input MinisterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MinisterWhereInput
  AND: [MinisterSubscriptionWhereInput!]
  OR: [MinisterSubscriptionWhereInput!]
  NOT: [MinisterSubscriptionWhereInput!]
}

input MinisterUpdateInput {
  name: String
  votes: VoteUpdateManyWithoutMinisterInput
  ministry: MinistryUpdateOneWithoutMinisterInput
  deletedAt: DateTime
  deleted: Int
}

input MinisterUpdateManyMutationInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

input MinisterUpdateOneWithoutMinistryInput {
  create: MinisterCreateWithoutMinistryInput
  update: MinisterUpdateWithoutMinistryDataInput
  upsert: MinisterUpsertWithoutMinistryInput
  delete: Boolean
  disconnect: Boolean
  connect: MinisterWhereUniqueInput
}

input MinisterUpdateOneWithoutVotesInput {
  create: MinisterCreateWithoutVotesInput
  update: MinisterUpdateWithoutVotesDataInput
  upsert: MinisterUpsertWithoutVotesInput
  delete: Boolean
  disconnect: Boolean
  connect: MinisterWhereUniqueInput
}

input MinisterUpdateWithoutMinistryDataInput {
  name: String
  votes: VoteUpdateManyWithoutMinisterInput
  deletedAt: DateTime
  deleted: Int
}

input MinisterUpdateWithoutVotesDataInput {
  name: String
  ministry: MinistryUpdateOneWithoutMinisterInput
  deletedAt: DateTime
  deleted: Int
}

input MinisterUpsertWithoutMinistryInput {
  update: MinisterUpdateWithoutMinistryDataInput!
  create: MinisterCreateWithoutMinistryInput!
}

input MinisterUpsertWithoutVotesInput {
  update: MinisterUpdateWithoutVotesDataInput!
  create: MinisterCreateWithoutVotesInput!
}

input MinisterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  ministry: MinistryWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deleted: Int
  deleted_not: Int
  deleted_in: [Int!]
  deleted_not_in: [Int!]
  deleted_lt: Int
  deleted_lte: Int
  deleted_gt: Int
  deleted_gte: Int
  AND: [MinisterWhereInput!]
  OR: [MinisterWhereInput!]
  NOT: [MinisterWhereInput!]
}

input MinisterWhereUniqueInput {
  id: ID
}

type Ministry {
  id: ID!
  name: String
  minister: Minister
  government: Government
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deleted: Int!
}

type MinistryConnection {
  pageInfo: PageInfo!
  edges: [MinistryEdge]!
  aggregate: AggregateMinistry!
}

input MinistryCreateInput {
  name: String
  minister: MinisterCreateOneWithoutMinistryInput
  government: GovernmentCreateOneWithoutMinistriesInput
  deletedAt: DateTime
  deleted: Int
}

input MinistryCreateManyWithoutGovernmentInput {
  create: [MinistryCreateWithoutGovernmentInput!]
  connect: [MinistryWhereUniqueInput!]
}

input MinistryCreateOneWithoutMinisterInput {
  create: MinistryCreateWithoutMinisterInput
  connect: MinistryWhereUniqueInput
}

input MinistryCreateWithoutGovernmentInput {
  name: String
  minister: MinisterCreateOneWithoutMinistryInput
  deletedAt: DateTime
  deleted: Int
}

input MinistryCreateWithoutMinisterInput {
  name: String
  government: GovernmentCreateOneWithoutMinistriesInput
  deletedAt: DateTime
  deleted: Int
}

type MinistryEdge {
  node: Ministry!
  cursor: String!
}

enum MinistryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  deleted_ASC
  deleted_DESC
}

type MinistryPreviousValues {
  id: ID!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deleted: Int!
}

input MinistryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deleted: Int
  deleted_not: Int
  deleted_in: [Int!]
  deleted_not_in: [Int!]
  deleted_lt: Int
  deleted_lte: Int
  deleted_gt: Int
  deleted_gte: Int
  AND: [MinistryScalarWhereInput!]
  OR: [MinistryScalarWhereInput!]
  NOT: [MinistryScalarWhereInput!]
}

type MinistrySubscriptionPayload {
  mutation: MutationType!
  node: Ministry
  updatedFields: [String!]
  previousValues: MinistryPreviousValues
}

input MinistrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MinistryWhereInput
  AND: [MinistrySubscriptionWhereInput!]
  OR: [MinistrySubscriptionWhereInput!]
  NOT: [MinistrySubscriptionWhereInput!]
}

input MinistryUpdateInput {
  name: String
  minister: MinisterUpdateOneWithoutMinistryInput
  government: GovernmentUpdateOneWithoutMinistriesInput
  deletedAt: DateTime
  deleted: Int
}

input MinistryUpdateManyDataInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

input MinistryUpdateManyMutationInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

input MinistryUpdateManyWithoutGovernmentInput {
  create: [MinistryCreateWithoutGovernmentInput!]
  delete: [MinistryWhereUniqueInput!]
  connect: [MinistryWhereUniqueInput!]
  set: [MinistryWhereUniqueInput!]
  disconnect: [MinistryWhereUniqueInput!]
  update: [MinistryUpdateWithWhereUniqueWithoutGovernmentInput!]
  upsert: [MinistryUpsertWithWhereUniqueWithoutGovernmentInput!]
  deleteMany: [MinistryScalarWhereInput!]
  updateMany: [MinistryUpdateManyWithWhereNestedInput!]
}

input MinistryUpdateManyWithWhereNestedInput {
  where: MinistryScalarWhereInput!
  data: MinistryUpdateManyDataInput!
}

input MinistryUpdateOneWithoutMinisterInput {
  create: MinistryCreateWithoutMinisterInput
  update: MinistryUpdateWithoutMinisterDataInput
  upsert: MinistryUpsertWithoutMinisterInput
  delete: Boolean
  disconnect: Boolean
  connect: MinistryWhereUniqueInput
}

input MinistryUpdateWithoutGovernmentDataInput {
  name: String
  minister: MinisterUpdateOneWithoutMinistryInput
  deletedAt: DateTime
  deleted: Int
}

input MinistryUpdateWithoutMinisterDataInput {
  name: String
  government: GovernmentUpdateOneWithoutMinistriesInput
  deletedAt: DateTime
  deleted: Int
}

input MinistryUpdateWithWhereUniqueWithoutGovernmentInput {
  where: MinistryWhereUniqueInput!
  data: MinistryUpdateWithoutGovernmentDataInput!
}

input MinistryUpsertWithoutMinisterInput {
  update: MinistryUpdateWithoutMinisterDataInput!
  create: MinistryCreateWithoutMinisterInput!
}

input MinistryUpsertWithWhereUniqueWithoutGovernmentInput {
  where: MinistryWhereUniqueInput!
  update: MinistryUpdateWithoutGovernmentDataInput!
  create: MinistryCreateWithoutGovernmentInput!
}

input MinistryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  minister: MinisterWhereInput
  government: GovernmentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deleted: Int
  deleted_not: Int
  deleted_in: [Int!]
  deleted_not_in: [Int!]
  deleted_lt: Int
  deleted_lte: Int
  deleted_gt: Int
  deleted_gte: Int
  AND: [MinistryWhereInput!]
  OR: [MinistryWhereInput!]
  NOT: [MinistryWhereInput!]
}

input MinistryWhereUniqueInput {
  id: ID
}

type Mutation {
  createGovernment(data: GovernmentCreateInput!): Government!
  updateGovernment(data: GovernmentUpdateInput!, where: GovernmentWhereUniqueInput!): Government
  updateManyGovernments(data: GovernmentUpdateManyMutationInput!, where: GovernmentWhereInput): BatchPayload!
  upsertGovernment(where: GovernmentWhereUniqueInput!, create: GovernmentCreateInput!, update: GovernmentUpdateInput!): Government!
  deleteGovernment(where: GovernmentWhereUniqueInput!): Government
  deleteManyGovernments(where: GovernmentWhereInput): BatchPayload!
  createMinister(data: MinisterCreateInput!): Minister!
  updateMinister(data: MinisterUpdateInput!, where: MinisterWhereUniqueInput!): Minister
  updateManyMinisters(data: MinisterUpdateManyMutationInput!, where: MinisterWhereInput): BatchPayload!
  upsertMinister(where: MinisterWhereUniqueInput!, create: MinisterCreateInput!, update: MinisterUpdateInput!): Minister!
  deleteMinister(where: MinisterWhereUniqueInput!): Minister
  deleteManyMinisters(where: MinisterWhereInput): BatchPayload!
  createMinistry(data: MinistryCreateInput!): Ministry!
  updateMinistry(data: MinistryUpdateInput!, where: MinistryWhereUniqueInput!): Ministry
  updateManyMinistries(data: MinistryUpdateManyMutationInput!, where: MinistryWhereInput): BatchPayload!
  upsertMinistry(where: MinistryWhereUniqueInput!, create: MinistryCreateInput!, update: MinistryUpdateInput!): Ministry!
  deleteMinistry(where: MinistryWhereUniqueInput!): Ministry
  deleteManyMinistries(where: MinistryWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateManyVotes(data: VoteUpdateManyMutationInput!, where: VoteWhereInput): BatchPayload!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  government(where: GovernmentWhereUniqueInput!): Government
  governments(where: GovernmentWhereInput, orderBy: GovernmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Government]!
  governmentsConnection(where: GovernmentWhereInput, orderBy: GovernmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GovernmentConnection!
  minister(where: MinisterWhereUniqueInput!): Minister
  ministers(where: MinisterWhereInput, orderBy: MinisterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Minister]!
  ministersConnection(where: MinisterWhereInput, orderBy: MinisterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MinisterConnection!
  ministry(where: MinistryWhereUniqueInput!): Ministry
  ministries(where: MinistryWhereInput, orderBy: MinistryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ministry]!
  ministriesConnection(where: MinistryWhereInput, orderBy: MinistryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MinistryConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

type Subscription {
  government(where: GovernmentSubscriptionWhereInput): GovernmentSubscriptionPayload
  minister(where: MinisterSubscriptionWhereInput): MinisterSubscriptionPayload
  ministry(where: MinistrySubscriptionWhereInput): MinistrySubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type Vote {
  id: ID!
  name: String
  minister: Minister
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deleted: Int!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  name: String
  minister: MinisterCreateOneWithoutVotesInput
  deletedAt: DateTime
  deleted: Int
}

input VoteCreateManyWithoutMinisterInput {
  create: [VoteCreateWithoutMinisterInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutMinisterInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  deleted_ASC
  deleted_DESC
}

type VotePreviousValues {
  id: ID!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deleted: Int!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deleted: Int
  deleted_not: Int
  deleted_in: [Int!]
  deleted_not_in: [Int!]
  deleted_lt: Int
  deleted_lte: Int
  deleted_gt: Int
  deleted_gte: Int
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateInput {
  name: String
  minister: MinisterUpdateOneWithoutVotesInput
  deletedAt: DateTime
  deleted: Int
}

input VoteUpdateManyDataInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

input VoteUpdateManyMutationInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

input VoteUpdateManyWithoutMinisterInput {
  create: [VoteCreateWithoutMinisterInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutMinisterInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutMinisterInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput!
  data: VoteUpdateManyDataInput!
}

input VoteUpdateWithoutMinisterDataInput {
  name: String
  deletedAt: DateTime
  deleted: Int
}

input VoteUpdateWithWhereUniqueWithoutMinisterInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutMinisterDataInput!
}

input VoteUpsertWithWhereUniqueWithoutMinisterInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutMinisterDataInput!
  create: VoteCreateWithoutMinisterInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  minister: MinisterWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deleted: Int
  deleted_not: Int
  deleted_in: [Int!]
  deleted_not_in: [Int!]
  deleted_lt: Int
  deleted_lte: Int
  deleted_gt: Int
  deleted_gte: Int
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
