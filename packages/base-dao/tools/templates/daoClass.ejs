// @ts-ignore
import { createEntityDAO } from '@venncity/base-dao';
import * as openCrudSchema from './openCrudSchema';

export default class <%= entityNameUpperFirstLetter %>DAO {
  private readonly entityDAO: any;

  constructor({ hooks, daoAuth, publishCrudEvent }: { hooks: any, daoAuth: any, publishCrudEvent: any }) {
    this.entityDAO = createEntityDAO({
      entityName: '<%= entityNameLowerFirstLetter %>',
      hooks,
      daoAuth,
      publishCrudEvent
    });
  }

  <%= entityNameLowerFirstLetter %>(context: any, where: openCrudSchema.Query<%= entityNameUpperFirstLetter %>Args['where']): Promise<openCrudSchema.Query['<%= entityNameLowerFirstLetter %>']> {
    return this.entityDAO.<%= entityNameLowerFirstLetter %>(context, where);
  }

  <%= entityNameLowerFirstLetter %>ById(context: any, id: openCrudSchema.Scalars['ID']): Promise<openCrudSchema.Query['<%= entityNameLowerFirstLetter %>']> {
    return this.entityDAO.<%= entityNameLowerFirstLetter %>ById(context, id);
  }

  <%= entitiesNameLowerFirstLetter %>(context: any, args: openCrudSchema.Query<%= entitiesNameUpperFirstLetter %>Args & { skipPagination?: boolean }): Promise<openCrudSchema.Query['<%= entitiesNameLowerFirstLetter %>']> {
    return this.entityDAO.<%= entitiesNameLowerFirstLetter %>(context, args);
  }

  <%= entitiesNameLowerFirstLetter %>ByIds(context: any, ids: openCrudSchema.Scalars['ID'][]): Promise<openCrudSchema.Query['<%= entitiesNameLowerFirstLetter %>']> {
    return this.entityDAO.<%= entitiesNameLowerFirstLetter %>ByIds(context, ids);
  }

  create<%= entityNameUpperFirstLetter %>(context: any, data: openCrudSchema.MutationCreate<%= entityNameUpperFirstLetter %>Args['data']): Promise<openCrudSchema.Mutation['create<%= entityNameUpperFirstLetter %>']> {
    return this.entityDAO.create<%= entityNameUpperFirstLetter %>(context, data);
  }

  update<%= entityNameUpperFirstLetter %>(context: any, args: openCrudSchema.MutationUpdate<%= entityNameUpperFirstLetter %>Args): Promise<openCrudSchema.Mutation['update<%= entityNameUpperFirstLetter %>']> {
    return this.entityDAO.update<%= entityNameUpperFirstLetter %>(context, args);
  }

  updateMany<%= entitiesNameUpperFirstLetter %>(context: any, args: openCrudSchema.MutationUpdateMany<%= entitiesNameUpperFirstLetter %>Args): Promise<openCrudSchema.Mutation['updateMany<%= entitiesNameUpperFirstLetter %>']> {
    return this.entityDAO.updateMany<%= entitiesNameUpperFirstLetter %>(context, args);
  }

  delete<%= entityNameUpperFirstLetter %>(context: any, where: openCrudSchema.MutationDelete<%= entityNameUpperFirstLetter %>Args['where']): Promise<openCrudSchema.Mutation['delete<%= entityNameUpperFirstLetter %>']> {
    return this.entityDAO.delete<%= entityNameUpperFirstLetter %>(context, where);
  }

  deleteMany<%= entitiesNameUpperFirstLetter %>(context: any, where: openCrudSchema.MutationDeleteMany<%= entitiesNameUpperFirstLetter %>Args['where']): Promise<openCrudSchema.Mutation['deleteMany<%= entitiesNameUpperFirstLetter %>']> {
    return this.entityDAO.deleteMany<%= entitiesNameUpperFirstLetter %>(context, where);
  }

  <%= entitiesNameLowerFirstLetter %>Connection(parent: any, args: openCrudSchema.Query<%= entitiesNameUpperFirstLetter %>ConnectionArgs, context: any): Promise<openCrudSchema.Query['<%= entitiesNameLowerFirstLetter %>Connection']> {
    return this.entityDAO.<%= entitiesNameLowerFirstLetter %>Connection(parent, args, context);
  }

  getRelatedEntityId: async (originalEntityId: string, relationEntityName: string) => {
    return this.entityDAO.getRelatedEntityId(originalEntityId, relationEntityName);
  }

  getRelatedEntity: async (originalEntityId: string, relationEntityName: string) => {
    return this.entityDAO.getRelatedEntity(originalEntityId, relationEntityName);
  }

  getRelatedEntityIds: async (originalEntityId: string, relationEntityName: string, args?: any) => {
    return this.entityDAO.getRelatedEntityIds(originalEntityId, relationEntityName, args);
  }

  getRelatedEntities: async (originalEntityId: string, relationEntityName: string, args?: any) => {
    return this.entityDAO.getRelatedEntities(originalEntityId, relationEntityName, args);
  }

  getHooks(): any {
    return this.entityDAO.getHooks();
  }
}
